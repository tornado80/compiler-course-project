Token(type: PROGRAM, lexeme: 'PROGRAM', attribute: None, lineno: 1)
Token(type: ID, lexeme: 'compilerProjTest', attribute: None, lineno: 1)
Token(type: VAR, lexeme: 'var', attribute: None, lineno: 2)
Token(type: ID, lexeme: 'a_var', attribute: None, lineno: 3)
Token(type: COMMA, lexeme: ',', attribute: None, lineno: 3)
Token(type: ID, lexeme: 'b_var', attribute: None, lineno: 3)
Token(type: COMMA, lexeme: ',', attribute: None, lineno: 3)
Token(type: ID, lexeme: 'c_var', attribute: None, lineno: 3)
Token(type: COMMA, lexeme: ',', attribute: None, lineno: 3)
Token(type: ID, lexeme: 'i', attribute: None, lineno: 3)
Token(type: COMMA, lexeme: ',', attribute: None, lineno: 3)
Token(type: ID, lexeme: 'chosenOp', attribute: None, lineno: 3)
Token(type: COMMA, lexeme: ',', attribute: None, lineno: 3)
Token(type: ID, lexeme: 'b', attribute: None, lineno: 3)
Token(type: COMMA, lexeme: ',', attribute: None, lineno: 3)
Token(type: ID, lexeme: 'g', attribute: None, lineno: 3)
Token(type: COMMA, lexeme: ',', attribute: None, lineno: 3)
Token(type: ID, lexeme: 'h', attribute: None, lineno: 3)
Token(type: COMMA, lexeme: ',', attribute: None, lineno: 3)
Token(type: ID, lexeme: 'd', attribute: None, lineno: 3)
Token(type: COLON, lexeme: ':', attribute: None, lineno: 3)
Token(type: INTEGER, lexeme: 'integer', attribute: None, lineno: 3)
Token(type: SEMICOLON, lexeme: ';', attribute: None, lineno: 3)
Token(type: ID, lexeme: 's', attribute: None, lineno: 4)
Token(type: COMMA, lexeme: ',', attribute: None, lineno: 4)
Token(type: ID, lexeme: 'c', attribute: None, lineno: 4)
Token(type: COLON, lexeme: ':', attribute: None, lineno: 4)
Token(type: REAL, lexeme: 'real', attribute: None, lineno: 4)
Token(type: SEMICOLON, lexeme: ';', attribute: None, lineno: 4)
Token(type: PROCEDURE, lexeme: 'procedure', attribute: None, lineno: 9)
Token(type: ID, lexeme: 'findMin', attribute: None, lineno: 9)
Token(type: LEFT_PARENTHESIS, lexeme: '(', attribute: None, lineno: 9)
Token(type: ID, lexeme: 'x', attribute: None, lineno: 9)
Token(type: COMMA, lexeme: ',', attribute: None, lineno: 9)
Token(type: ID, lexeme: 'y', attribute: None, lineno: 9)
Token(type: COMMA, lexeme: ',', attribute: None, lineno: 9)
Token(type: ID, lexeme: 'z', attribute: None, lineno: 9)
Token(type: COLON, lexeme: ':', attribute: None, lineno: 9)
Token(type: INTEGER, lexeme: 'integer', attribute: None, lineno: 9)
Token(type: SEMICOLON, lexeme: ';', attribute: None, lineno: 9)
Token(type: ID, lexeme: 'm', attribute: None, lineno: 9)
Token(type: COLON, lexeme: ':', attribute: None, lineno: 9)
Token(type: INTEGER, lexeme: 'integer', attribute: None, lineno: 9)
Token(type: SEMICOLON, lexeme: ';', attribute: None, lineno: 9)
Token(type: ID, lexeme: 's', attribute: None, lineno: 9)
Token(type: COLON, lexeme: ':', attribute: None, lineno: 9)
Token(type: REAL, lexeme: 'real', attribute: None, lineno: 9)
Token(type: RIGHT_PARENTHESIS, lexeme: ')', attribute: None, lineno: 9)
Token(type: SEMICOLON, lexeme: ';', attribute: None, lineno: 9)
Token(type: VAR, lexeme: 'var', attribute: None, lineno: 10)
Token(type: ID, lexeme: 'l', attribute: None, lineno: 10)
Token(type: COLON, lexeme: ':', attribute: None, lineno: 10)
Token(type: INTEGER, lexeme: 'integer', attribute: None, lineno: 10)
Token(type: SEMICOLON, lexeme: ';', attribute: None, lineno: 10)
Token(type: BEGIN, lexeme: 'begin', attribute: None, lineno: 11)
Token(type: IF, lexeme: 'if', attribute: None, lineno: 14)
Token(type: ID, lexeme: 'x', attribute: None, lineno: 14)
Token(type: LESS_THAN, lexeme: '<', attribute: None, lineno: 14)
Token(type: ID, lexeme: 'y', attribute: None, lineno: 14)
Token(type: THEN, lexeme: 'then', attribute: None, lineno: 14)
Token(type: ID, lexeme: 'm', attribute: None, lineno: 15)
Token(type: ASSIGN, lexeme: ':=', attribute: None, lineno: 15)
Token(type: ID, lexeme: 'x', attribute: None, lineno: 15)
Token(type: ELSE, lexeme: 'else', attribute: None, lineno: 16)
Token(type: ID, lexeme: 'm', attribute: None, lineno: 17)
Token(type: ASSIGN, lexeme: ':=', attribute: None, lineno: 17)
Token(type: ID, lexeme: 'y', attribute: None, lineno: 17)
Token(type: SEMICOLON, lexeme: ';', attribute: None, lineno: 17)
Token(type: IF, lexeme: 'if', attribute: None, lineno: 19)
Token(type: ID, lexeme: 'z', attribute: None, lineno: 19)
Token(type: LESS_THAN, lexeme: '<', attribute: None, lineno: 19)
Token(type: ID, lexeme: 'm', attribute: None, lineno: 19)
Token(type: THEN, lexeme: 'then', attribute: None, lineno: 19)
Token(type: ID, lexeme: 'm', attribute: None, lineno: 20)
Token(type: ASSIGN, lexeme: ':=', attribute: None, lineno: 20)
Token(type: ID, lexeme: 'z', attribute: None, lineno: 20)
Token(type: END, lexeme: 'end', attribute: None, lineno: 21)
Token(type: SEMICOLON, lexeme: ';', attribute: None, lineno: 21)
Token(type: BEGIN, lexeme: 'begin', attribute: None, lineno: 23)
Token(type: IF, lexeme: 'if', attribute: None, lineno: 25)
Token(type: ID, lexeme: 'b', attribute: None, lineno: 25)
Token(type: LESS_THAN, lexeme: '<', attribute: None, lineno: 25)
Token(type: ID, lexeme: 'c', attribute: None, lineno: 25)
Token(type: THEN, lexeme: 'then', attribute: None, lineno: 25)
Token(type: IF, lexeme: 'if', attribute: None, lineno: 26)
Token(type: ID, lexeme: 'c', attribute: None, lineno: 26)
Token(type: EQUAL, lexeme: '=', attribute: None, lineno: 26)
Token(type: ID, lexeme: 'd', attribute: None, lineno: 26)
Token(type: THEN, lexeme: 'then', attribute: None, lineno: 26)
Token(type: ID, lexeme: 'g', attribute: None, lineno: 27)
Token(type: ASSIGN, lexeme: ':=', attribute: None, lineno: 27)
Token(type: MINUS, lexeme: '-', attribute: None, lineno: 27)
Token(type: INTEGER_CONSTANT, lexeme: '4', attribute: 4, lineno: 27)
Token(type: TIMES, lexeme: '*', attribute: None, lineno: 27)
Token(type: INTEGER_CONSTANT, lexeme: '2', attribute: 2, lineno: 27)
Token(type: ELSE, lexeme: 'else', attribute: None, lineno: 28)
Token(type: ID, lexeme: 'h', attribute: None, lineno: 29)
Token(type: ASSIGN, lexeme: ':=', attribute: None, lineno: 29)
Token(type: INTEGER_CONSTANT, lexeme: '3', attribute: 3, lineno: 29)
Token(type: SEMICOLON, lexeme: ';', attribute: None, lineno: 29)
Token(type: WHILE, lexeme: 'while', attribute: None, lineno: 43)
Token(type: ID, lexeme: 'b_var', attribute: None, lineno: 43)
Token(type: GREATER_THAN, lexeme: '>', attribute: None, lineno: 43)
Token(type: INTEGER_CONSTANT, lexeme: '10', attribute: 10, lineno: 43)
Token(type: DO, lexeme: 'do', attribute: None, lineno: 43)
Token(type: BEGIN, lexeme: 'begin', attribute: None, lineno: 44)
Token(type: ID, lexeme: 'findMin', attribute: None, lineno: 45)
Token(type: LEFT_PARENTHESIS, lexeme: '(', attribute: None, lineno: 45)
Token(type: ID, lexeme: 'a_var', attribute: None, lineno: 45)
Token(type: COMMA, lexeme: ',', attribute: None, lineno: 45)
Token(type: ID, lexeme: 'b_var', attribute: None, lineno: 45)
Token(type: COMMA, lexeme: ',', attribute: None, lineno: 45)
Token(type: ID, lexeme: 'c_var', attribute: None, lineno: 45)
Token(type: COMMA, lexeme: ',', attribute: None, lineno: 45)
Token(type: INTEGER_CONSTANT, lexeme: '3', attribute: 3, lineno: 45)
Token(type: PLUS, lexeme: '+', attribute: None, lineno: 45)
Token(type: INTEGER_CONSTANT, lexeme: '8', attribute: 8, lineno: 45)
Token(type: COMMA, lexeme: ',', attribute: None, lineno: 45)
Token(type: REAL_CONSTANT, lexeme: '4.0', attribute: 4.0, lineno: 45)
Token(type: RIGHT_PARENTHESIS, lexeme: ')', attribute: None, lineno: 45)
Token(type: SEMICOLON, lexeme: ';', attribute: None, lineno: 45)
Token(type: ID, lexeme: 'b_var', attribute: None, lineno: 46)
Token(type: ASSIGN, lexeme: ':=', attribute: None, lineno: 46)
Token(type: ID, lexeme: 'b_var', attribute: None, lineno: 46)
Token(type: MINUS, lexeme: '-', attribute: None, lineno: 46)
Token(type: INTEGER_CONSTANT, lexeme: '2', attribute: 2, lineno: 46)
Token(type: END, lexeme: 'end', attribute: None, lineno: 47)
Token(type: SEMICOLON, lexeme: ';', attribute: None, lineno: 47)
Token(type: IF, lexeme: 'if', attribute: None, lineno: 48)
Token(type: LEFT_PARENTHESIS, lexeme: '(', attribute: None, lineno: 48)
Token(type: ID, lexeme: 'b_var', attribute: None, lineno: 48)
Token(type: GREATER_THAN, lexeme: '>', attribute: None, lineno: 48)
Token(type: ID, lexeme: 's', attribute: None, lineno: 48)
Token(type: RIGHT_PARENTHESIS, lexeme: ')', attribute: None, lineno: 48)
Token(type: OR, lexeme: 'or', attribute: None, lineno: 48)
Token(type: FALSE, lexeme: 'false', attribute: False, lineno: 48)
Token(type: THEN, lexeme: 'then', attribute: None, lineno: 48)
Token(type: ID, lexeme: 's', attribute: None, lineno: 49)
Token(type: ASSIGN, lexeme: ':=', attribute: None, lineno: 49)
Token(type: REAL_CONSTANT, lexeme: '4.0', attribute: 4.0, lineno: 49)
Token(type: SEMICOLON, lexeme: ';', attribute: None, lineno: 49)
Token(type: ID, lexeme: 's', attribute: None, lineno: 50)
Token(type: ASSIGN, lexeme: ':=', attribute: None, lineno: 50)
Token(type: ID, lexeme: 's', attribute: None, lineno: 50)
Token(type: MOD, lexeme: 'mod', attribute: None, lineno: 50)
Token(type: INTEGER_CONSTANT, lexeme: '5', attribute: 5, lineno: 50)
Token(type: SEMICOLON, lexeme: ';', attribute: None, lineno: 50)
Token(type: IF, lexeme: 'if', attribute: None, lineno: 51)
Token(type: LEFT_PARENTHESIS, lexeme: '(', attribute: None, lineno: 51)
Token(type: ID, lexeme: 's', attribute: None, lineno: 51)
Token(type: GREATER_THAN, lexeme: '>', attribute: None, lineno: 51)
Token(type: INTEGER_CONSTANT, lexeme: '2', attribute: 2, lineno: 51)
Token(type: RIGHT_PARENTHESIS, lexeme: ')', attribute: None, lineno: 51)
Token(type: AND, lexeme: 'and', attribute: None, lineno: 51)
Token(type: LEFT_PARENTHESIS, lexeme: '(', attribute: None, lineno: 51)
Token(type: ID, lexeme: 's', attribute: None, lineno: 51)
Token(type: LESS_THAN, lexeme: '<', attribute: None, lineno: 51)
Token(type: INTEGER_CONSTANT, lexeme: '4', attribute: 4, lineno: 51)
Token(type: RIGHT_PARENTHESIS, lexeme: ')', attribute: None, lineno: 51)
Token(type: THEN, lexeme: 'then', attribute: None, lineno: 51)
Token(type: ID, lexeme: 'a_var', attribute: None, lineno: 52)
Token(type: ASSIGN, lexeme: ':=', attribute: None, lineno: 52)
Token(type: MINUS, lexeme: '-', attribute: None, lineno: 52)
Token(type: INTEGER_CONSTANT, lexeme: '5', attribute: 5, lineno: 52)
Token(type: SEMICOLON, lexeme: ';', attribute: None, lineno: 52)
Token(type: ID, lexeme: 'b', attribute: None, lineno: 53)
Token(type: ASSIGN, lexeme: ':=', attribute: None, lineno: 53)
Token(type: INTEGER_CONSTANT, lexeme: '646', attribute: 646, lineno: 53)
Token(type: SEMICOLON, lexeme: ';', attribute: None, lineno: 53)
Token(type: ID, lexeme: 'c', attribute: None, lineno: 54)
Token(type: ASSIGN, lexeme: ':=', attribute: None, lineno: 54)
Token(type: REAL_CONSTANT, lexeme: '0.00000', attribute: 0.0, lineno: 54)
Token(type: END, lexeme: 'end', attribute: None, lineno: 55)
